from datetime import datetime
from sqlalchemy import String, Integer, Boolean, DateTime, ForeignKey
from sqlalchemy.orm import Mapped, mapped_column
from common.sql import Base


class WechatUser(Base):
    __tablename__ = "wechat_user"

    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int | None] = mapped_column(ForeignKey("user.id"), index=True)
    wechat_platform: Mapped[int | None] = mapped_column(Integer, comment='0: unknown, 1: Revornix WeChat Web App, 2: Revornix WeChat Mini Program')
    wechat_user_open_id: Mapped[str | None] = mapped_column(String(100), index=True)
    wechat_user_union_id: Mapped[str | None] = mapped_column(String(100))
    wechat_user_name: Mapped[str | None] = mapped_column(String(100))
    delete_at: Mapped[datetime | None] = mapped_column(DateTime(timezone=True))


class PhoneUser(Base):
    __tablename__ = "phone_user"

    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int | None] = mapped_column(ForeignKey("user.id"), index=True)
    phone: Mapped[str | None] = mapped_column(String(20), index=True)
    delete_at: Mapped[datetime | None] = mapped_column(DateTime(timezone=True))


class GoogleUser(Base):
    __tablename__ = "google_user"

    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int | None] = mapped_column(ForeignKey("user.id"), index=True)
    google_user_id: Mapped[str | None] = mapped_column(String(100), index=True)
    google_user_name: Mapped[str | None] = mapped_column(String(100))
    delete_at: Mapped[datetime | None] = mapped_column(DateTime(timezone=True))


class GithubUser(Base):
    __tablename__ = "github_user"

    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int | None] = mapped_column(ForeignKey("user.id"), index=True)
    github_user_id: Mapped[str | None] = mapped_column(String(100), index=True)
    github_user_name: Mapped[str | None] = mapped_column(String(100))
    delete_at: Mapped[datetime | None] = mapped_column(DateTime(timezone=True))


class EmailUser(Base):
    __tablename__ = "email_user"

    id: Mapped[int] = mapped_column(primary_key=True)
    nickname: Mapped[str | None] = mapped_column(String(200))
    user_id: Mapped[int | None] = mapped_column(ForeignKey("user.id"), index=True)
    email: Mapped[str | None] = mapped_column(String(100), index=True)
    hashed_password: Mapped[str] = mapped_column(String(255), nullable=False)
    is_initial_password: Mapped[bool] = mapped_column(Boolean, default=False, nullable=False, comment="Whether it is the initial password generated by the system")
    initial_password: Mapped[str | None] = mapped_column(String(255), comment="The initial password generated by the system")
    has_seen_initial_password: Mapped[bool] = mapped_column(Boolean, default=False, nullable=False, comment="Whether the initial password has been viewed")
    delete_at: Mapped[datetime | None] = mapped_column(DateTime(timezone=True))


class FollowUser(Base):
    __tablename__ = "follow_user"

    id: Mapped[int] = mapped_column(primary_key=True)
    to_user_id: Mapped[int] = mapped_column(ForeignKey("user.id"), index=True)
    from_user_id: Mapped[int] = mapped_column(ForeignKey("user.id"), index=True)
    create_time: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=datetime.utcnow, nullable=False)
    update_time: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=datetime.utcnow, nullable=False)
    delete_at: Mapped[datetime | None] = mapped_column(DateTime(timezone=True))


class User(Base):
    __tablename__ = "user"

    id: Mapped[int] = mapped_column(primary_key=True)
    uuid: Mapped[str] = mapped_column(String(100), index=True, nullable=False)
    avatar: Mapped[str] = mapped_column(String(500), nullable=False)
    nickname: Mapped[str] = mapped_column(String(50), index=True, nullable=False)
    last_login_ip: Mapped[str | None] = mapped_column(String(50))
    last_login_time: Mapped[datetime | None] = mapped_column(DateTime(timezone=True))
    slogan: Mapped[str | None] = mapped_column(String(200))
    gender: Mapped[int | None] = mapped_column(Integer, comment="0: unk, 1: male, 2: female")
    age: Mapped[int | None] = mapped_column(Integer)
    is_forbidden: Mapped[bool] = mapped_column(Boolean, default=False)
    create_time: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=datetime.utcnow, nullable=False)
    update_time: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=datetime.utcnow, nullable=False)
    delete_at: Mapped[datetime | None] = mapped_column(DateTime(timezone=True))
    default_document_reader_model_id: Mapped[int | None] = mapped_column(Integer)
    default_revornix_model_id: Mapped[int | None] = mapped_column(Integer)
    default_file_document_parse_user_engine_id: Mapped[int | None] = mapped_column(Integer)
    default_website_document_parse_user_engine_id: Mapped[int | None] = mapped_column(Integer)
    default_read_mark_reason: Mapped[int | None] = mapped_column(Integer, comment="0: Request once, 1: Scroll to bottom, 2: Manually Mark")
    default_user_file_system: Mapped[int | None] = mapped_column(Integer)


class UserDefaultSettings(Base):
    __tablename__ = "user_default_settings"

    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("user.id"), index=True)