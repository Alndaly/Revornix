name: Build and Push Multi-Arch Docker Images

on:
  push:
    branches:
      - master
    tags:
      - 'v*' # 当推送 tag 时，会生成对应版本镜像

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 拉取代码
      - name: Checkout
        uses: actions/checkout@v4

      # 2. 登录 Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. 设置 QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 4. 设置 Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 5. 安装 yq 和 jq（解析 docker-compose.yaml）
      - name: Install yq & jq
        run: sudo apt-get update && sudo apt-get install -y jq yq

      # 6. 清理 Docker 缓存，避免占用过多磁盘
      - name: Cleanup Docker
        run: |
          docker system prune -af
          docker builder prune -af

      # 7. 构建并推送api镜像
      - name: Build and Push Multi-Arch Images
        run: |
          set -e
          # 只提取有 build 配置的服务
          services=$(yq '.services' docker-compose.yaml | jq -r 'to_entries[] | select(.value.build) | .key')
          for service in $services; do
            context=$(yq ".services[\"$service\"].build.context" docker-compose.yaml | jq -r '.')
            image=$(yq ".services[\"$service\"].image" docker-compose.yaml | jq -r '.')
            echo "构建服务: $service"
            echo "构建上下文: $context"
            echo "镜像名: $image"
            TAGS="--tag ${image}:latest --tag ${image}:${GITHUB_SHA}"
            if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
              VERSION_TAG="${GITHUB_REF_NAME}"
              TAGS="$TAGS --tag ${image}:${VERSION_TAG}"
            fi
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --push \
              --file ${context}/Dockerfile \
              ${TAGS} \
              ${context} \
              --cache-from=type=registry,ref=${image}:cache \
              --cache-to=type=registry,ref=${image}:cache,mode=max
            # 清理构建缓存
            docker builder prune -f
          done

      # # 构建并推送web
      # - name: Build and Push web Image
      #   run: |
      #     set -e
      #     image = "revornix/web"
      #     content = "web"
      #     TAGS="--tag ${image}:latest --tag ${image}:${GITHUB_SHA}"
      #     if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
      #       VERSION_TAG="${GITHUB_REF_NAME}"
      #       TAGS="$TAGS --tag ${image}:${VERSION_TAG}"
      #     fi
      #     docker buildx build \
      #       --platform linux/amd64,linux/arm64 \
      #       --push \
      #       --file ${context}/Dockerfile \
      #       ${TAGS} \
      #       ${context} \
      #       --cache-from=type=registry,ref=${image}:cache \
      #       --cache-to=type=registry,ref=${image}:cache,mode=max
      #     # 清理构建缓存
      #     docker builder prune -f

      # # 构建并推送daily hot
      # - name: Build and Push daily-hot Image
      #   run: |
      #     set -e
      #     image = "revornix/daily-hot"
      #     content = "daily-hot"
      #     TAGS="--tag ${image}:latest --tag ${image}:${GITHUB_SHA}"
      #     if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
      #       VERSION_TAG="${GITHUB_REF_NAME}"
      #       TAGS="$TAGS --tag ${image}:${VERSION_TAG}"
      #     fi
      #     docker buildx build \
      #       --platform linux/amd64,linux/arm64 \
      #       --push \
      #       --file ${context}/Dockerfile \
      #       ${TAGS} \
      #       ${context} \
      #       --cache-from=type=registry,ref=${image}:cache \
      #       --cache-to=type=registry,ref=${image}:cache,mode=max
      #     # 清理构建缓存
      #     docker builder prune -f

      # # 构建并推送api
      # - name: Build and Push api Image
      #   run: |
      #     set -e
      #     image = "revornix/api"
      #     content = "api"
      #     TAGS="--tag ${image}:latest --tag ${image}:${GITHUB_SHA}"
      #     if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
      #       VERSION_TAG="${GITHUB_REF_NAME}"
      #       TAGS="$TAGS --tag ${image}:${VERSION_TAG}"
      #     fi
      #     docker buildx build \
      #       --platform linux/amd64,linux/arm64 \
      #       --push \
      #       --file ${context}/Dockerfile \
      #       ${TAGS} \
      #       ${context} \
      #       --cache-from=type=registry,ref=${image}:cache \
      #       --cache-to=type=registry,ref=${image}:cache,mode=max
      #     # 清理构建缓存
      #     docker builder prune -f

      # # 构建并推送celery-worker
      # - name: Build and Push celery-worker Image
      #   run: |
      #     set -e
      #     image = "revornix/celery-worker"
      #     content = "celery-worker"
      #     TAGS="--tag ${image}:latest --tag ${image}:${GITHUB_SHA}"
      #     if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
      #       VERSION_TAG="${GITHUB_REF_NAME}"
      #       TAGS="$TAGS --tag ${image}:${VERSION_TAG}"
      #     fi
      #     docker buildx build \
      #       --platform linux/amd64,linux/arm64 \
      #       --push \
      #       --file ${context}/Dockerfile \
      #       ${TAGS} \
      #       ${context} \
      #       --cache-from=type=registry,ref=${image}:cache \
      #       --cache-to=type=registry,ref=${image}:cache,mode=max
      #     # 清理构建缓存
      #     docker builder prune -f