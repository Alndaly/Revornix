name: Build and Push Multi-Arch Docker Images

on:
  push:
    branches:
      - master
    tags:
      - 'v*' # 当推送 tag 时，会生成对应版本镜像

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 拉取代码
      - name: Checkout
        uses: actions/checkout@v4

      # 2. 登录 Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. 设置 QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 4. 设置 Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 5. 安装 yq 和 jq（解析 docker-compose.yaml）
      - name: Install yq & jq
        run: sudo apt-get update && sudo apt-get install -y jq yq

      # 6. 清理 Docker 缓存，避免占用过多磁盘
      - name: Cleanup Docker
        run: |
          docker system prune -af
          docker builder prune -af

      # 7. 构建并推送镜像（串行，使用 registry cache）
      - name: Build and Push Multi-Arch Images
        run: |
          set -e

          services=$(yq -o=json '.services' docker-compose.yaml | jq -r 'to_entries[] | select(.value.build) | .key')

          for service in $services; do
            context=$(yq -o=json ".services.$service.build.context" docker-compose.yaml | jq -r '.')
            image=$(yq -o=json ".services.$service.image" docker-compose.yaml | jq -r '.')

            echo "Building service: $service"
            echo "Context: $context"
            echo "Image: $image"

            TAGS="--tag ${image}:latest --tag ${image}:${GITHUB_SHA}"
            if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
              VERSION_TAG="${GITHUB_REF_NAME}"
              TAGS="$TAGS --tag ${image}:${VERSION_TAG}"
            fi

            # Build 镜像
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --push \
              --file ${context}/Dockerfile \
              ${TAGS} \
              ${context} \
              --cache-from=type=registry,ref=${image}:cache \
              --cache-to=type=registry,ref=${image}:cache,mode=max

            # 构建完成后清理本地 buildkit 临时层
            docker builder prune -f
          done