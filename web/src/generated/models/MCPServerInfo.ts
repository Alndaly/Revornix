/* tslint:disable */
/* eslint-disable */
/**
 * Revornix Main Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 1142704468@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MCPServerInfo
 */
export interface MCPServerInfo {
    /**
     * 
     * @type {number}
     * @memberof MCPServerInfo
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof MCPServerInfo
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof MCPServerInfo
     */
    category: number;
    /**
     * 
     * @type {string}
     * @memberof MCPServerInfo
     */
    address?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MCPServerInfo
     */
    cmd?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MCPServerInfo
     */
    args?: string | null;
}

/**
 * Check if a given object implements the MCPServerInfo interface.
 */
export function instanceOfMCPServerInfo(value: object): value is MCPServerInfo {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('category' in value) || value['category'] === undefined) return false;
    return true;
}

export function MCPServerInfoFromJSON(json: any): MCPServerInfo {
    return MCPServerInfoFromJSONTyped(json, false);
}

export function MCPServerInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): MCPServerInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'category': json['category'],
        'address': json['address'] == null ? undefined : json['address'],
        'cmd': json['cmd'] == null ? undefined : json['cmd'],
        'args': json['args'] == null ? undefined : json['args'],
    };
}

export function MCPServerInfoToJSON(json: any): MCPServerInfo {
    return MCPServerInfoToJSONTyped(json, false);
}

export function MCPServerInfoToJSONTyped(value?: MCPServerInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'category': value['category'],
        'address': value['address'],
        'cmd': value['cmd'],
        'args': value['args'],
    };
}

