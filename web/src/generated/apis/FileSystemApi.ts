/* tslint:disable */
/* eslint-disable */
/**
 * Revornix Main Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 1142704468@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FileSystemInstallRequest,
  FileSystemSearchRequest,
  FileSystemUpdateRequest,
  HTTPValidationError,
  MineFileSystemSearchResponse,
  NormalResponse,
  ProvideFileSystemSearchResponse,
} from '../models/index';
import {
    FileSystemInstallRequestFromJSON,
    FileSystemInstallRequestToJSON,
    FileSystemSearchRequestFromJSON,
    FileSystemSearchRequestToJSON,
    FileSystemUpdateRequestFromJSON,
    FileSystemUpdateRequestToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MineFileSystemSearchResponseFromJSON,
    MineFileSystemSearchResponseToJSON,
    NormalResponseFromJSON,
    NormalResponseToJSON,
    ProvideFileSystemSearchResponseFromJSON,
    ProvideFileSystemSearchResponseToJSON,
} from '../models/index';

export interface InstallFileSystemFileSystemInstallPostRequest {
    fileSystemInstallRequest: FileSystemInstallRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface ProvideFileSystemFileSystemProvidePostRequest {
    fileSystemSearchRequest: FileSystemSearchRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SearchMineFileSystemFileSystemMinePostRequest {
    fileSystemSearchRequest: FileSystemSearchRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface UpdateFileSystemFileSystemUpdatePostRequest {
    fileSystemUpdateRequest: FileSystemUpdateRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

/**
 * 
 */
export class FileSystemApi extends runtime.BaseAPI {

    /**
     * Install File System
     */
    async installFileSystemFileSystemInstallPostRaw(requestParameters: InstallFileSystemFileSystemInstallPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['fileSystemInstallRequest'] == null) {
            throw new runtime.RequiredError(
                'fileSystemInstallRequest',
                'Required parameter "fileSystemInstallRequest" was null or undefined when calling installFileSystemFileSystemInstallPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/file_system/install`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileSystemInstallRequestToJSON(requestParameters['fileSystemInstallRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Install File System
     */
    async installFileSystemFileSystemInstallPost(requestParameters: InstallFileSystemFileSystemInstallPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.installFileSystemFileSystemInstallPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provide File System
     */
    async provideFileSystemFileSystemProvidePostRaw(requestParameters: ProvideFileSystemFileSystemProvidePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProvideFileSystemSearchResponse>> {
        if (requestParameters['fileSystemSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'fileSystemSearchRequest',
                'Required parameter "fileSystemSearchRequest" was null or undefined when calling provideFileSystemFileSystemProvidePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/file_system/provide`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileSystemSearchRequestToJSON(requestParameters['fileSystemSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProvideFileSystemSearchResponseFromJSON(jsonValue));
    }

    /**
     * Provide File System
     */
    async provideFileSystemFileSystemProvidePost(requestParameters: ProvideFileSystemFileSystemProvidePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProvideFileSystemSearchResponse> {
        const response = await this.provideFileSystemFileSystemProvidePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Mine File System
     */
    async searchMineFileSystemFileSystemMinePostRaw(requestParameters: SearchMineFileSystemFileSystemMinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MineFileSystemSearchResponse>> {
        if (requestParameters['fileSystemSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'fileSystemSearchRequest',
                'Required parameter "fileSystemSearchRequest" was null or undefined when calling searchMineFileSystemFileSystemMinePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/file_system/mine`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileSystemSearchRequestToJSON(requestParameters['fileSystemSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MineFileSystemSearchResponseFromJSON(jsonValue));
    }

    /**
     * Search Mine File System
     */
    async searchMineFileSystemFileSystemMinePost(requestParameters: SearchMineFileSystemFileSystemMinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MineFileSystemSearchResponse> {
        const response = await this.searchMineFileSystemFileSystemMinePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update File System
     */
    async updateFileSystemFileSystemUpdatePostRaw(requestParameters: UpdateFileSystemFileSystemUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['fileSystemUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'fileSystemUpdateRequest',
                'Required parameter "fileSystemUpdateRequest" was null or undefined when calling updateFileSystemFileSystemUpdatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/file_system/update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileSystemUpdateRequestToJSON(requestParameters['fileSystemUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Update File System
     */
    async updateFileSystemFileSystemUpdatePost(requestParameters: UpdateFileSystemFileSystemUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.updateFileSystemFileSystemUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
