/* tslint:disable */
/* eslint-disable */
/**
 * Revornix Main Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 1142704468@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AliyunOSSPresignUploadURLRequest,
  AliyunOSSPresignUploadURLResponse,
  FileSystemInfo,
  FileSystemInfoRequest,
  FileSystemInstallRequest,
  FileSystemInstallResponse,
  FileSystemSearchRequest,
  FileUrlPrefixRequest,
  FileUrlPrefixResponse,
  HTTPValidationError,
  MineFileSystemSearchResponse,
  NormalResponse,
  ProvideFileSystemSearchResponse,
  S3PresignUploadURLRequest,
  S3PresignUploadURLResponse,
  UserFileSystemDeleteRequest,
  UserFileSystemInfo,
  UserFileSystemInfoRequest,
  UserFileSystemUpdateRequest,
} from '../models/index';
import {
    AliyunOSSPresignUploadURLRequestFromJSON,
    AliyunOSSPresignUploadURLRequestToJSON,
    AliyunOSSPresignUploadURLResponseFromJSON,
    AliyunOSSPresignUploadURLResponseToJSON,
    FileSystemInfoFromJSON,
    FileSystemInfoToJSON,
    FileSystemInfoRequestFromJSON,
    FileSystemInfoRequestToJSON,
    FileSystemInstallRequestFromJSON,
    FileSystemInstallRequestToJSON,
    FileSystemInstallResponseFromJSON,
    FileSystemInstallResponseToJSON,
    FileSystemSearchRequestFromJSON,
    FileSystemSearchRequestToJSON,
    FileUrlPrefixRequestFromJSON,
    FileUrlPrefixRequestToJSON,
    FileUrlPrefixResponseFromJSON,
    FileUrlPrefixResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MineFileSystemSearchResponseFromJSON,
    MineFileSystemSearchResponseToJSON,
    NormalResponseFromJSON,
    NormalResponseToJSON,
    ProvideFileSystemSearchResponseFromJSON,
    ProvideFileSystemSearchResponseToJSON,
    S3PresignUploadURLRequestFromJSON,
    S3PresignUploadURLRequestToJSON,
    S3PresignUploadURLResponseFromJSON,
    S3PresignUploadURLResponseToJSON,
    UserFileSystemDeleteRequestFromJSON,
    UserFileSystemDeleteRequestToJSON,
    UserFileSystemInfoFromJSON,
    UserFileSystemInfoToJSON,
    UserFileSystemInfoRequestFromJSON,
    UserFileSystemInfoRequestToJSON,
    UserFileSystemUpdateRequestFromJSON,
    UserFileSystemUpdateRequestToJSON,
} from '../models/index';

export interface DeleteUserFileSystemFileSystemUserFileSystemDeletePostRequest {
    userFileSystemDeleteRequest: UserFileSystemDeleteRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetAliyunOssPresignedUrlFileSystemAliyunOssPresignUploadUrlPostRequest {
    aliyunOSSPresignUploadURLRequest: AliyunOSSPresignUploadURLRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetBuiltInPresignedUrlFileSystemBuiltInPresignUploadUrlPostRequest {
    s3PresignUploadURLRequest: S3PresignUploadURLRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetFileSystemInfoFileSystemDetailPostRequest {
    fileSystemInfoRequest: FileSystemInfoRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetFileSystemInfoFileSystemUserFileSystemDetailPostRequest {
    userFileSystemInfoRequest: UserFileSystemInfoRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetUrlPrefixFileSystemUrlPrefixPostRequest {
    fileUrlPrefixRequest: FileUrlPrefixRequest;
}

export interface InstallUserFileSystemFileSystemInstallPostRequest {
    fileSystemInstallRequest: FileSystemInstallRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface ProvideFileSystemFileSystemProvidePostRequest {
    fileSystemSearchRequest: FileSystemSearchRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SearchMineFileSystemFileSystemMinePostRequest {
    fileSystemSearchRequest: FileSystemSearchRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface UpdateFileSystemFileSystemUpdatePostRequest {
    userFileSystemUpdateRequest: UserFileSystemUpdateRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

/**
 * 
 */
export class FileSystemApi extends runtime.BaseAPI {

    /**
     * Delete User File System
     */
    async deleteUserFileSystemFileSystemUserFileSystemDeletePostRaw(requestParameters: DeleteUserFileSystemFileSystemUserFileSystemDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['userFileSystemDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'userFileSystemDeleteRequest',
                'Required parameter "userFileSystemDeleteRequest" was null or undefined when calling deleteUserFileSystemFileSystemUserFileSystemDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/file-system/user-file-system/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserFileSystemDeleteRequestToJSON(requestParameters['userFileSystemDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Delete User File System
     */
    async deleteUserFileSystemFileSystemUserFileSystemDeletePost(requestParameters: DeleteUserFileSystemFileSystemUserFileSystemDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.deleteUserFileSystemFileSystemUserFileSystemDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Aliyun Oss Presigned Url
     */
    async getAliyunOssPresignedUrlFileSystemAliyunOssPresignUploadUrlPostRaw(requestParameters: GetAliyunOssPresignedUrlFileSystemAliyunOssPresignUploadUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AliyunOSSPresignUploadURLResponse>> {
        if (requestParameters['aliyunOSSPresignUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                'aliyunOSSPresignUploadURLRequest',
                'Required parameter "aliyunOSSPresignUploadURLRequest" was null or undefined when calling getAliyunOssPresignedUrlFileSystemAliyunOssPresignUploadUrlPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/file-system/aliyun-oss/presign-upload-url`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AliyunOSSPresignUploadURLRequestToJSON(requestParameters['aliyunOSSPresignUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AliyunOSSPresignUploadURLResponseFromJSON(jsonValue));
    }

    /**
     * Get Aliyun Oss Presigned Url
     */
    async getAliyunOssPresignedUrlFileSystemAliyunOssPresignUploadUrlPost(requestParameters: GetAliyunOssPresignedUrlFileSystemAliyunOssPresignUploadUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AliyunOSSPresignUploadURLResponse> {
        const response = await this.getAliyunOssPresignedUrlFileSystemAliyunOssPresignUploadUrlPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Built In Presigned Url
     */
    async getBuiltInPresignedUrlFileSystemBuiltInPresignUploadUrlPostRaw(requestParameters: GetBuiltInPresignedUrlFileSystemBuiltInPresignUploadUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<S3PresignUploadURLResponse>> {
        if (requestParameters['s3PresignUploadURLRequest'] == null) {
            throw new runtime.RequiredError(
                's3PresignUploadURLRequest',
                'Required parameter "s3PresignUploadURLRequest" was null or undefined when calling getBuiltInPresignedUrlFileSystemBuiltInPresignUploadUrlPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/file-system/built-in/presign-upload-url`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: S3PresignUploadURLRequestToJSON(requestParameters['s3PresignUploadURLRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => S3PresignUploadURLResponseFromJSON(jsonValue));
    }

    /**
     * Get Built In Presigned Url
     */
    async getBuiltInPresignedUrlFileSystemBuiltInPresignUploadUrlPost(requestParameters: GetBuiltInPresignedUrlFileSystemBuiltInPresignUploadUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<S3PresignUploadURLResponse> {
        const response = await this.getBuiltInPresignedUrlFileSystemBuiltInPresignUploadUrlPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get File System Info
     */
    async getFileSystemInfoFileSystemDetailPostRaw(requestParameters: GetFileSystemInfoFileSystemDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileSystemInfo>> {
        if (requestParameters['fileSystemInfoRequest'] == null) {
            throw new runtime.RequiredError(
                'fileSystemInfoRequest',
                'Required parameter "fileSystemInfoRequest" was null or undefined when calling getFileSystemInfoFileSystemDetailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/file-system/detail`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileSystemInfoRequestToJSON(requestParameters['fileSystemInfoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileSystemInfoFromJSON(jsonValue));
    }

    /**
     * Get File System Info
     */
    async getFileSystemInfoFileSystemDetailPost(requestParameters: GetFileSystemInfoFileSystemDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileSystemInfo> {
        const response = await this.getFileSystemInfoFileSystemDetailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get File System Info
     */
    async getFileSystemInfoFileSystemUserFileSystemDetailPostRaw(requestParameters: GetFileSystemInfoFileSystemUserFileSystemDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserFileSystemInfo>> {
        if (requestParameters['userFileSystemInfoRequest'] == null) {
            throw new runtime.RequiredError(
                'userFileSystemInfoRequest',
                'Required parameter "userFileSystemInfoRequest" was null or undefined when calling getFileSystemInfoFileSystemUserFileSystemDetailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/file-system/user-file-system/detail`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserFileSystemInfoRequestToJSON(requestParameters['userFileSystemInfoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFileSystemInfoFromJSON(jsonValue));
    }

    /**
     * Get File System Info
     */
    async getFileSystemInfoFileSystemUserFileSystemDetailPost(requestParameters: GetFileSystemInfoFileSystemUserFileSystemDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserFileSystemInfo> {
        const response = await this.getFileSystemInfoFileSystemUserFileSystemDetailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Url Prefix
     */
    async getUrlPrefixFileSystemUrlPrefixPostRaw(requestParameters: GetUrlPrefixFileSystemUrlPrefixPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileUrlPrefixResponse>> {
        if (requestParameters['fileUrlPrefixRequest'] == null) {
            throw new runtime.RequiredError(
                'fileUrlPrefixRequest',
                'Required parameter "fileUrlPrefixRequest" was null or undefined when calling getUrlPrefixFileSystemUrlPrefixPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/file-system/url-prefix`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileUrlPrefixRequestToJSON(requestParameters['fileUrlPrefixRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileUrlPrefixResponseFromJSON(jsonValue));
    }

    /**
     * Get Url Prefix
     */
    async getUrlPrefixFileSystemUrlPrefixPost(requestParameters: GetUrlPrefixFileSystemUrlPrefixPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileUrlPrefixResponse> {
        const response = await this.getUrlPrefixFileSystemUrlPrefixPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Install User File System
     */
    async installUserFileSystemFileSystemInstallPostRaw(requestParameters: InstallUserFileSystemFileSystemInstallPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileSystemInstallResponse>> {
        if (requestParameters['fileSystemInstallRequest'] == null) {
            throw new runtime.RequiredError(
                'fileSystemInstallRequest',
                'Required parameter "fileSystemInstallRequest" was null or undefined when calling installUserFileSystemFileSystemInstallPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/file-system/install`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileSystemInstallRequestToJSON(requestParameters['fileSystemInstallRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileSystemInstallResponseFromJSON(jsonValue));
    }

    /**
     * Install User File System
     */
    async installUserFileSystemFileSystemInstallPost(requestParameters: InstallUserFileSystemFileSystemInstallPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileSystemInstallResponse> {
        const response = await this.installUserFileSystemFileSystemInstallPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provide File System
     */
    async provideFileSystemFileSystemProvidePostRaw(requestParameters: ProvideFileSystemFileSystemProvidePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProvideFileSystemSearchResponse>> {
        if (requestParameters['fileSystemSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'fileSystemSearchRequest',
                'Required parameter "fileSystemSearchRequest" was null or undefined when calling provideFileSystemFileSystemProvidePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/file-system/provide`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileSystemSearchRequestToJSON(requestParameters['fileSystemSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProvideFileSystemSearchResponseFromJSON(jsonValue));
    }

    /**
     * Provide File System
     */
    async provideFileSystemFileSystemProvidePost(requestParameters: ProvideFileSystemFileSystemProvidePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProvideFileSystemSearchResponse> {
        const response = await this.provideFileSystemFileSystemProvidePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Mine File System
     */
    async searchMineFileSystemFileSystemMinePostRaw(requestParameters: SearchMineFileSystemFileSystemMinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MineFileSystemSearchResponse>> {
        if (requestParameters['fileSystemSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'fileSystemSearchRequest',
                'Required parameter "fileSystemSearchRequest" was null or undefined when calling searchMineFileSystemFileSystemMinePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/file-system/mine`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileSystemSearchRequestToJSON(requestParameters['fileSystemSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MineFileSystemSearchResponseFromJSON(jsonValue));
    }

    /**
     * Search Mine File System
     */
    async searchMineFileSystemFileSystemMinePost(requestParameters: SearchMineFileSystemFileSystemMinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MineFileSystemSearchResponse> {
        const response = await this.searchMineFileSystemFileSystemMinePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update File System
     */
    async updateFileSystemFileSystemUpdatePostRaw(requestParameters: UpdateFileSystemFileSystemUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['userFileSystemUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'userFileSystemUpdateRequest',
                'Required parameter "userFileSystemUpdateRequest" was null or undefined when calling updateFileSystemFileSystemUpdatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }


        let urlPath = `/file-system/update`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserFileSystemUpdateRequestToJSON(requestParameters['userFileSystemUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Update File System
     */
    async updateFileSystemFileSystemUpdatePost(requestParameters: UpdateFileSystemFileSystemUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.updateFileSystemFileSystemUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
