/* tslint:disable */
/* eslint-disable */
/**
 * Revornix Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 1142704468@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatMessages,
  HTTPValidationError,
} from '../models/index';
import {
    ChatMessagesFromJSON,
    ChatMessagesToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface AskAiAiAskPostRequest {
    chatMessages: ChatMessages;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

/**
 * 
 */
export class AiApi extends runtime.BaseAPI {

    /**
     * Ask Ai
     */
    async askAiAiAskPostRaw(requestParameters: AskAiAiAskPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['chatMessages'] == null) {
            throw new runtime.RequiredError(
                'chatMessages',
                'Required parameter "chatMessages" was null or undefined when calling askAiAiAskPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }

        const response = await this.request({
            path: `/ai/ask`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChatMessagesToJSON(requestParameters['chatMessages']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Ask Ai
     */
    async askAiAiAskPost(requestParameters: AskAiAiAskPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.askAiAiAskPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
