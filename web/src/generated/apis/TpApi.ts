/* tslint:disable */
/* eslint-disable */
/**
 * Revornix Main Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 1142704468@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AllMySectionsResponse,
  CreateLabelResponse,
  CreateNotificationRecordRequest,
  DocumentCreateRequest,
  DocumentCreateResponse,
  HTTPValidationError,
  LabelAddRequest,
  LabelListResponse,
  NormalResponse,
} from '../models/index';
import {
    AllMySectionsResponseFromJSON,
    AllMySectionsResponseToJSON,
    CreateLabelResponseFromJSON,
    CreateLabelResponseToJSON,
    CreateNotificationRecordRequestFromJSON,
    CreateNotificationRecordRequestToJSON,
    DocumentCreateRequestFromJSON,
    DocumentCreateRequestToJSON,
    DocumentCreateResponseFromJSON,
    DocumentCreateResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LabelAddRequestFromJSON,
    LabelAddRequestToJSON,
    LabelListResponseFromJSON,
    LabelListResponseToJSON,
    NormalResponseFromJSON,
    NormalResponseToJSON,
} from '../models/index';

export interface AddLabelTpSectionLabelCreatePostRequest {
    labelAddRequest: LabelAddRequest;
    apiKey?: string | null;
}

export interface CreateDocumentLabelTpDocumentLabelCreatePostRequest {
    labelAddRequest: LabelAddRequest;
    apiKey?: string | null;
}

export interface CreateDocumentTpDocumentCreatePostRequest {
    documentCreateRequest: DocumentCreateRequest;
    apiKey?: string | null;
}

export interface CreateNotificationTpNotificationCreatePostRequest {
    createNotificationRecordRequest: CreateNotificationRecordRequest;
    apiKey?: string | null;
}

export interface GetAllMineSectionsTpSectionMineAllPostRequest {
    apiKey?: string | null;
}

export interface ListLabelTpDocumentLabelListPostRequest {
    apiKey?: string | null;
}

/**
 * 
 */
export class TpApi extends runtime.BaseAPI {

    /**
     * Add Label
     */
    async addLabelTpSectionLabelCreatePostRaw(requestParameters: AddLabelTpSectionLabelCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateLabelResponse>> {
        if (requestParameters['labelAddRequest'] == null) {
            throw new runtime.RequiredError(
                'labelAddRequest',
                'Required parameter "labelAddRequest" was null or undefined when calling addLabelTpSectionLabelCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['apiKey'] != null) {
            headerParameters['api-key'] = String(requestParameters['apiKey']);
        }

        const response = await this.request({
            path: `/tp/section/label/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LabelAddRequestToJSON(requestParameters['labelAddRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateLabelResponseFromJSON(jsonValue));
    }

    /**
     * Add Label
     */
    async addLabelTpSectionLabelCreatePost(requestParameters: AddLabelTpSectionLabelCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateLabelResponse> {
        const response = await this.addLabelTpSectionLabelCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Document Label
     */
    async createDocumentLabelTpDocumentLabelCreatePostRaw(requestParameters: CreateDocumentLabelTpDocumentLabelCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentCreateResponse>> {
        if (requestParameters['labelAddRequest'] == null) {
            throw new runtime.RequiredError(
                'labelAddRequest',
                'Required parameter "labelAddRequest" was null or undefined when calling createDocumentLabelTpDocumentLabelCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['apiKey'] != null) {
            headerParameters['api-key'] = String(requestParameters['apiKey']);
        }

        const response = await this.request({
            path: `/tp/document/label/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LabelAddRequestToJSON(requestParameters['labelAddRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Document Label
     */
    async createDocumentLabelTpDocumentLabelCreatePost(requestParameters: CreateDocumentLabelTpDocumentLabelCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentCreateResponse> {
        const response = await this.createDocumentLabelTpDocumentLabelCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Document
     */
    async createDocumentTpDocumentCreatePostRaw(requestParameters: CreateDocumentTpDocumentCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentCreateResponse>> {
        if (requestParameters['documentCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'documentCreateRequest',
                'Required parameter "documentCreateRequest" was null or undefined when calling createDocumentTpDocumentCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['apiKey'] != null) {
            headerParameters['api-key'] = String(requestParameters['apiKey']);
        }

        const response = await this.request({
            path: `/tp/document/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentCreateRequestToJSON(requestParameters['documentCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Document
     */
    async createDocumentTpDocumentCreatePost(requestParameters: CreateDocumentTpDocumentCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentCreateResponse> {
        const response = await this.createDocumentTpDocumentCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Notification
     */
    async createNotificationTpNotificationCreatePostRaw(requestParameters: CreateNotificationTpNotificationCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['createNotificationRecordRequest'] == null) {
            throw new runtime.RequiredError(
                'createNotificationRecordRequest',
                'Required parameter "createNotificationRecordRequest" was null or undefined when calling createNotificationTpNotificationCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['apiKey'] != null) {
            headerParameters['api-key'] = String(requestParameters['apiKey']);
        }

        const response = await this.request({
            path: `/tp/notification/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNotificationRecordRequestToJSON(requestParameters['createNotificationRecordRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Create Notification
     */
    async createNotificationTpNotificationCreatePost(requestParameters: CreateNotificationTpNotificationCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.createNotificationTpNotificationCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get All Mine Sections
     */
    async getAllMineSectionsTpSectionMineAllPostRaw(requestParameters: GetAllMineSectionsTpSectionMineAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllMySectionsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['apiKey'] != null) {
            headerParameters['api-key'] = String(requestParameters['apiKey']);
        }

        const response = await this.request({
            path: `/tp/section/mine/all`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllMySectionsResponseFromJSON(jsonValue));
    }

    /**
     * Get All Mine Sections
     */
    async getAllMineSectionsTpSectionMineAllPost(requestParameters: GetAllMineSectionsTpSectionMineAllPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllMySectionsResponse> {
        const response = await this.getAllMineSectionsTpSectionMineAllPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Label
     */
    async listLabelTpDocumentLabelListPostRaw(requestParameters: ListLabelTpDocumentLabelListPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LabelListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['apiKey'] != null) {
            headerParameters['api-key'] = String(requestParameters['apiKey']);
        }

        const response = await this.request({
            path: `/tp/document/label/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelListResponseFromJSON(jsonValue));
    }

    /**
     * List Label
     */
    async listLabelTpDocumentLabelListPost(requestParameters: ListLabelTpDocumentLabelListPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LabelListResponse> {
        const response = await this.listLabelTpDocumentLabelListPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
