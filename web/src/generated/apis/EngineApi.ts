/* tslint:disable */
/* eslint-disable */
/**
 * Revornix Main Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 1142704468@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EngineInstallRequest,
  EngineSearchRequest,
  EngineUpdateRequest,
  HTTPValidationError,
  MineEngineSearchResponse,
  NormalResponse,
  ProvideEngineSearchResponse,
} from '../models/index';
import {
    EngineInstallRequestFromJSON,
    EngineInstallRequestToJSON,
    EngineSearchRequestFromJSON,
    EngineSearchRequestToJSON,
    EngineUpdateRequestFromJSON,
    EngineUpdateRequestToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MineEngineSearchResponseFromJSON,
    MineEngineSearchResponseToJSON,
    NormalResponseFromJSON,
    NormalResponseToJSON,
    ProvideEngineSearchResponseFromJSON,
    ProvideEngineSearchResponseToJSON,
} from '../models/index';

export interface EnableEngineEngineUpdatePostRequest {
    engineUpdateRequest: EngineUpdateRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface InstallEngineEngineInstallPostRequest {
    engineInstallRequest: EngineInstallRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface ProvideDocumentParseEngineEngineProvidePostRequest {
    engineSearchRequest: EngineSearchRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SearchDocumentParseEngineEngineMinePostRequest {
    engineSearchRequest: EngineSearchRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

/**
 * 
 */
export class EngineApi extends runtime.BaseAPI {

    /**
     * Enable Engine
     */
    async enableEngineEngineUpdatePostRaw(requestParameters: EnableEngineEngineUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['engineUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'engineUpdateRequest',
                'Required parameter "engineUpdateRequest" was null or undefined when calling enableEngineEngineUpdatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }

        const response = await this.request({
            path: `/engine/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EngineUpdateRequestToJSON(requestParameters['engineUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Enable Engine
     */
    async enableEngineEngineUpdatePost(requestParameters: EnableEngineEngineUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.enableEngineEngineUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Install Engine
     */
    async installEngineEngineInstallPostRaw(requestParameters: InstallEngineEngineInstallPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['engineInstallRequest'] == null) {
            throw new runtime.RequiredError(
                'engineInstallRequest',
                'Required parameter "engineInstallRequest" was null or undefined when calling installEngineEngineInstallPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }

        const response = await this.request({
            path: `/engine/install`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EngineInstallRequestToJSON(requestParameters['engineInstallRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Install Engine
     */
    async installEngineEngineInstallPost(requestParameters: InstallEngineEngineInstallPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.installEngineEngineInstallPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provide Document Parse Engine
     */
    async provideDocumentParseEngineEngineProvidePostRaw(requestParameters: ProvideDocumentParseEngineEngineProvidePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProvideEngineSearchResponse>> {
        if (requestParameters['engineSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'engineSearchRequest',
                'Required parameter "engineSearchRequest" was null or undefined when calling provideDocumentParseEngineEngineProvidePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }

        const response = await this.request({
            path: `/engine/provide`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EngineSearchRequestToJSON(requestParameters['engineSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProvideEngineSearchResponseFromJSON(jsonValue));
    }

    /**
     * Provide Document Parse Engine
     */
    async provideDocumentParseEngineEngineProvidePost(requestParameters: ProvideDocumentParseEngineEngineProvidePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProvideEngineSearchResponse> {
        const response = await this.provideDocumentParseEngineEngineProvidePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Document Parse Engine
     */
    async searchDocumentParseEngineEngineMinePostRaw(requestParameters: SearchDocumentParseEngineEngineMinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MineEngineSearchResponse>> {
        if (requestParameters['engineSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'engineSearchRequest',
                'Required parameter "engineSearchRequest" was null or undefined when calling searchDocumentParseEngineEngineMinePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }

        const response = await this.request({
            path: `/engine/mine`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EngineSearchRequestToJSON(requestParameters['engineSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MineEngineSearchResponseFromJSON(jsonValue));
    }

    /**
     * Search Document Parse Engine
     */
    async searchDocumentParseEngineEngineMinePost(requestParameters: SearchDocumentParseEngineEngineMinePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MineEngineSearchResponse> {
        const response = await this.searchDocumentParseEngineEngineMinePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
