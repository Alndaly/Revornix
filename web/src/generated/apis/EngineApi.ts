/* tslint:disable */
/* eslint-disable */
/**
 * Revornix Main Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 1142704468@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EngineSearchRequest,
  EngineSearchResponse,
  HTTPValidationError,
} from '../models/index';
import {
    EngineSearchRequestFromJSON,
    EngineSearchRequestToJSON,
    EngineSearchResponseFromJSON,
    EngineSearchResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface SearchDocumentParseEngineEngineDocumentParseSearchPostRequest {
    engineSearchRequest: EngineSearchRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SearchWebsiteCrawelEngineEngineWebsiteCrawlSearchPostRequest {
    engineSearchRequest: EngineSearchRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

/**
 * 
 */
export class EngineApi extends runtime.BaseAPI {

    /**
     * Search Document Parse Engine
     */
    async searchDocumentParseEngineEngineDocumentParseSearchPostRaw(requestParameters: SearchDocumentParseEngineEngineDocumentParseSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EngineSearchResponse>> {
        if (requestParameters['engineSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'engineSearchRequest',
                'Required parameter "engineSearchRequest" was null or undefined when calling searchDocumentParseEngineEngineDocumentParseSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }

        const response = await this.request({
            path: `/engine/document-parse/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EngineSearchRequestToJSON(requestParameters['engineSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EngineSearchResponseFromJSON(jsonValue));
    }

    /**
     * Search Document Parse Engine
     */
    async searchDocumentParseEngineEngineDocumentParseSearchPost(requestParameters: SearchDocumentParseEngineEngineDocumentParseSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EngineSearchResponse> {
        const response = await this.searchDocumentParseEngineEngineDocumentParseSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Website Crawel Engine
     */
    async searchWebsiteCrawelEngineEngineWebsiteCrawlSearchPostRaw(requestParameters: SearchWebsiteCrawelEngineEngineWebsiteCrawlSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EngineSearchResponse>> {
        if (requestParameters['engineSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'engineSearchRequest',
                'Required parameter "engineSearchRequest" was null or undefined when calling searchWebsiteCrawelEngineEngineWebsiteCrawlSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }

        const response = await this.request({
            path: `/engine/website-crawl/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EngineSearchRequestToJSON(requestParameters['engineSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EngineSearchResponseFromJSON(jsonValue));
    }

    /**
     * Search Website Crawel Engine
     */
    async searchWebsiteCrawelEngineEngineWebsiteCrawlSearchPost(requestParameters: SearchWebsiteCrawelEngineEngineWebsiteCrawlSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EngineSearchResponse> {
        const response = await this.searchWebsiteCrawelEngineEngineWebsiteCrawlSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
