/* tslint:disable */
/* eslint-disable */
/**
 * Revornix Main Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 1142704468@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteNotificationRequest,
  HTTPValidationError,
  InifiniteScrollPagnitionNotification,
  NormalResponse,
  Notification,
  NotificationDetailRequest,
  ReadNotificationRequest,
  SearchNotificationRequest,
} from '../models/index';
import {
    DeleteNotificationRequestFromJSON,
    DeleteNotificationRequestToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    InifiniteScrollPagnitionNotificationFromJSON,
    InifiniteScrollPagnitionNotificationToJSON,
    NormalResponseFromJSON,
    NormalResponseToJSON,
    NotificationFromJSON,
    NotificationToJSON,
    NotificationDetailRequestFromJSON,
    NotificationDetailRequestToJSON,
    ReadNotificationRequestFromJSON,
    ReadNotificationRequestToJSON,
    SearchNotificationRequestFromJSON,
    SearchNotificationRequestToJSON,
} from '../models/index';

export interface DeleteNotificationNotificationDeletePostRequest {
    deleteNotificationRequest: DeleteNotificationRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface GetNotificationDetailNotificationDetailPostRequest {
    notificationDetailRequest: NotificationDetailRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface ReadAllNotificationNotificationReadAllPostRequest {
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface ReadNotificationNotificationReadPostRequest {
    readNotificationRequest: ReadNotificationRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

export interface SearchNotificationNotificationSearchPostRequest {
    searchNotificationRequest: SearchNotificationRequest;
    authorization?: string | null;
    xForwardedFor?: string | null;
}

/**
 * 
 */
export class NotificationApi extends runtime.BaseAPI {

    /**
     * Delete Notification
     */
    async deleteNotificationNotificationDeletePostRaw(requestParameters: DeleteNotificationNotificationDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['deleteNotificationRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteNotificationRequest',
                'Required parameter "deleteNotificationRequest" was null or undefined when calling deleteNotificationNotificationDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }

        const response = await this.request({
            path: `/notification/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteNotificationRequestToJSON(requestParameters['deleteNotificationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Delete Notification
     */
    async deleteNotificationNotificationDeletePost(requestParameters: DeleteNotificationNotificationDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.deleteNotificationNotificationDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Notification Detail
     */
    async getNotificationDetailNotificationDetailPostRaw(requestParameters: GetNotificationDetailNotificationDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Notification>> {
        if (requestParameters['notificationDetailRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationDetailRequest',
                'Required parameter "notificationDetailRequest" was null or undefined when calling getNotificationDetailNotificationDetailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }

        const response = await this.request({
            path: `/notification/detail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationDetailRequestToJSON(requestParameters['notificationDetailRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationFromJSON(jsonValue));
    }

    /**
     * Get Notification Detail
     */
    async getNotificationDetailNotificationDetailPost(requestParameters: GetNotificationDetailNotificationDetailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Notification> {
        const response = await this.getNotificationDetailNotificationDetailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read All Notification
     */
    async readAllNotificationNotificationReadAllPostRaw(requestParameters: ReadAllNotificationNotificationReadAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }

        const response = await this.request({
            path: `/notification/read-all`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Read All Notification
     */
    async readAllNotificationNotificationReadAllPost(requestParameters: ReadAllNotificationNotificationReadAllPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.readAllNotificationNotificationReadAllPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read Notification
     */
    async readNotificationNotificationReadPostRaw(requestParameters: ReadNotificationNotificationReadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NormalResponse>> {
        if (requestParameters['readNotificationRequest'] == null) {
            throw new runtime.RequiredError(
                'readNotificationRequest',
                'Required parameter "readNotificationRequest" was null or undefined when calling readNotificationNotificationReadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }

        const response = await this.request({
            path: `/notification/read`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadNotificationRequestToJSON(requestParameters['readNotificationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NormalResponseFromJSON(jsonValue));
    }

    /**
     * Read Notification
     */
    async readNotificationNotificationReadPost(requestParameters: ReadNotificationNotificationReadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NormalResponse> {
        const response = await this.readNotificationNotificationReadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Notification
     */
    async searchNotificationNotificationSearchPostRaw(requestParameters: SearchNotificationNotificationSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InifiniteScrollPagnitionNotification>> {
        if (requestParameters['searchNotificationRequest'] == null) {
            throw new runtime.RequiredError(
                'searchNotificationRequest',
                'Required parameter "searchNotificationRequest" was null or undefined when calling searchNotificationNotificationSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xForwardedFor'] != null) {
            headerParameters['x-forwarded-for'] = String(requestParameters['xForwardedFor']);
        }

        const response = await this.request({
            path: `/notification/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchNotificationRequestToJSON(requestParameters['searchNotificationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InifiniteScrollPagnitionNotificationFromJSON(jsonValue));
    }

    /**
     * Search Notification
     */
    async searchNotificationNotificationSearchPost(requestParameters: SearchNotificationNotificationSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InifiniteScrollPagnitionNotification> {
        const response = await this.searchNotificationNotificationSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
