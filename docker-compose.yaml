services:

  nginx:
      image: nginx:latest
      ports:
        - "80:80"
      volumes:
        - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      depends_on:
        - api
        - file-backend
        - web
        - daily-hot

  web:
    image: revornix/web
    build:
      context: web
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_PREFIX=${NEXT_PUBLIC_API_PREFIX} 
        - NEXT_PUBLIC_NOTIFICATION_WS_API_PREFIX=${NEXT_PUBLIC_NOTIFICATION_WS_API_PREFIX} 
        - NEXT_PUBLIC_DAILY_HOT_API_PREFIX=${NEXT_PUBLIC_DAILY_HOT_API_PREFIX} 
        - NEXT_PUBLIC_WECHAT_APP_ID=${NEXT_PUBLIC_WECHAT_APP_ID}
        - NEXT_PUBLIC_ALLOW_THIRD_PARTY_AUTH=${NEXT_PUBLIC_ALLOW_THIRD_PARTY_AUTH}
    depends_on:
      - api
      - file-backend

  daily-hot:
    image: revornix/daily-hot
    build:
      context: daily-hot
      dockerfile: Dockerfile

  api:
    image: revornix/api
    build:
      context: api
      dockerfile: Dockerfile
    # TODO: Move the initialization process to the FastAPI application startup
    command: ["sh", "-c", "python -m script.init_vector_base_data && python -m script.init_sql_base_data && fastapi run main.py --proxy-headers --host 0.0.0.0 --port 8001"]
    volumes:
      - ./api:/app
    depends_on:
      postgres:
        condition: service_healthy
      standalone:
        condition: service_started
      redis:
        condition: service_started
      neo4j:
        condition: service_started
    environment:
      - OAUTH_SECRET_KEY=${OAUTH_SECRET_KEY}
      - REDIS_URL=${REDIS_URL}
      - REDIS_PORT=${REDIS_PORT}
      - POSTGRES_DB_URL=${POSTGRES_DB_URL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - MILVUS_CLUSTER_ENDPOINT=${MILVUS_CLUSTER_ENDPOINT}
      - MILVUS_TOKEN=${MILVUS_TOKEN}
      - FILE_SYSTEM_SERVER_PRIVATE_URL=${FILE_SYSTEM_SERVER_PRIVATE_URL}
      - FILE_SYSTEM_SERVER_PUBLIC_URL=${FILE_SYSTEM_SERVER_PUBLIC_URL}
      - FILE_SYSTEM_USER_NAME=${FILE_SYSTEM_USER_NAME}
      - FILE_SYSTEM_PASSWORD=${FILE_SYSTEM_PASSWORD}
      - HF_ENDPOINT=${HF_ENDPOINT}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - TENCENT_SECRET_ID=${TENCENT_SECRET_ID}
      - TENCENT_SECRET_KEY=${TENCENT_SECRET_KEY}
      - TENCENT_SMS_SDK_APP_ID=${TENCENT_SMS_SDK_APP_ID}
      - TENCENT_SMS_APP_KEY=${TENCENT_SMS_APP_KEY}
      - TENCENT_SMS_SIGN=${TENCENT_SMS_SIGN}
      - WECHAT_APP_ID=${WECHAT_APP_ID}
      - WECHAT_APP_SECRET=${WECHAT_APP_SECRET}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery-worker:
    image: revornix/celery-worker
    build:
      context: celery-worker
      dockerfile: Dockerfile
    command: ["celery", "-A", "common.celery.app.celery_app", "worker", "--loglevel=info", "--pool=solo"]
    volumes:
      - ./volumes/temp:/app/temp
    depends_on:
      - standalone
      - postgres
      - redis
      - neo4j
    environment:
      - OAUTH_SECRET_KEY=${OAUTH_SECRET_KEY}
      - REDIS_URL=${REDIS_URL}
      - REDIS_PORT=${REDIS_PORT}
      - POSTGRES_DB_URL=${POSTGRES_DB_URL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - MILVUS_CLUSTER_ENDPOINT=${MILVUS_CLUSTER_ENDPOINT}
      - MILVUS_TOKEN=${MILVUS_TOKEN}
      - FILE_SYSTEM_SERVER_PRIVATE_URL=${FILE_SYSTEM_SERVER_PRIVATE_URL}
      - FILE_SYSTEM_SERVER_PUBLIC_URL=${FILE_SYSTEM_SERVER_PUBLIC_URL}
      - FILE_SYSTEM_USER_NAME=${FILE_SYSTEM_USER_NAME}
      - FILE_SYSTEM_PASSWORD=${FILE_SYSTEM_PASSWORD}
      - HF_ENDPOINT=${HF_ENDPOINT}

  file-backend:
    image: minio/minio
    environment:
      - MINIO_ACCESS_KEY=${FILE_SYSTEM_USER_NAME}
      - MINIO_SECRET_KEY=${FILE_SYSTEM_PASSWORD}
    ports:
      - "9011:9011"
      - "9010:9010"
    volumes:
      - ./volumes/files:/data
    command: minio server /data --address :9010 --console-address ":9011"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9010/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  neo4j:
    container_name: neo4j
    image: neo4j:latest
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: ${NEO4J_AUTH}
    volumes:
      - neo4j-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474"]
      interval: 30s
      timeout: 20s
      retries: 3

  postgres:
    container_name: postgres
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
       - ./volumes/postgresql:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:8.0-M04-alpine
    volumes:
      - ./volumes/redis:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 20s
      retries: 3
        
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.18
    environment:
      - ETCD_AUTO_COMPACTION_MODE=${ETCD_AUTO_COMPACTION_MODE}
      - ETCD_AUTO_COMPACTION_RETENTION=${ETCD_AUTO_COMPACTION_RETENTION}
      - ETCD_QUOTA_BACKEND_BYTES=${ETCD_QUOTA_BACKEND_BYTES}
      - ETCD_SNAPSHOT_COUNT=${ETCD_SNAPSHOT_COUNT}
    volumes:
      - etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: ${MILVUS_MINIO_USER_NAME}
      MINIO_SECRET_KEY: ${MILVUS_MINIO_PASSWORD}
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.5.6
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - standalone:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
      
  rsshub:
    # two ways to enable puppeteer:
    # * comment out marked lines, then use this image instead: diygod/rsshub:chromium-bundled
    # * (consumes more disk space and memory) leave everything unchanged
    image: diygod/rsshub
    restart: always
    ports:
        - "1200:1200"
    environment:
        NODE_ENV: production
        CACHE_TYPE: redis
        REDIS_URL: "redis://redis:6379/"
        PUPPETEER_WS_ENDPOINT: "ws://browserless:3000" # marked
        ALLOW_ORIGIN: "*" # marked
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:1200/healthz"]
        interval: 30s
        timeout: 10s
        retries: 3
    depends_on:
        - redis
        - browserless # marked

  browserless: # marked
    image: browserless/chrome # marked
    restart: always # marked
    ulimits: # marked
        core: # marked
            hard: 0 # marked
            soft: 0 # marked
    healthcheck: # marked
        test: ["CMD", "curl", "-f", "http://localhost:3000/pressure"] # marked
        interval: 30s # marked
        timeout: 10s # marked
        retries: 3 # marked

volumes:
  standalone:
    driver: local
  etcd:
    driver: local
  minio:
    driver: local
  neo4j-data:
    driver: local

networks:
  default:
    name: revornix
